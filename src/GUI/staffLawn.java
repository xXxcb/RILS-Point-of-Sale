/*
 * @author Carlos Burke - 1400681
 */
package GUI;

import CODE.Products.GameConsole;
import CODE.Products.GameDisc;
import CODE.Products.Movie;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class staffLawn extends JFrame implements ActionListener {

    private Object[][] tmpMovieInfo;
    private Object[][] tmpConsoleInfo;
    private Object[][] tmpDiscInfo;
    private Object[][] tmpSaleM;
    private Object[][] tmpSaleGC;
    private Object[][] tmpSaleGD;

    /**
     * Creates new form staffLawn
     */
    public staffLawn() {
        initComponents();
        registerListeners();
        setWindowProperties();        
        ViewMovies();
        ViewConsole();
        ViewDisc();         
    }

    private staffLawn(staffLawn aThis) {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MoviePane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecordsMovies = new javax.swing.JTable();
        btnAddM = new javax.swing.JButton();
        btnDeleteM = new javax.swing.JButton();
        btnViewM = new javax.swing.JButton();
        btnUpdateM = new javax.swing.JButton();
        btnNewSaleM = new javax.swing.JButton();
        lblIcon = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRecordsGameDisc = new javax.swing.JTable();
        btnAddGD = new javax.swing.JButton();
        btnDeleteGD = new javax.swing.JButton();
        btnViewGD = new javax.swing.JButton();
        btnUpdateGD = new javax.swing.JButton();
        btnNewSaleGD = new javax.swing.JButton();
        lblIcon1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRecordsGameConsoles = new javax.swing.JTable();
        btnAddGC = new javax.swing.JButton();
        btnDeleteGC = new javax.swing.JButton();
        btnViewGC = new javax.swing.JButton();
        btnUpdateGC = new javax.swing.JButton();
        btnNewSaleGC = new javax.swing.JButton();
        lblIcon2 = new javax.swing.JLabel();
        lblErrorMessages = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemLogOut = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblRecordsMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Genre", "Date Released", "Rating", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRecordsMovies);

        btnAddM.setText("ADD");
        btnAddM.setToolTipText("Enter a new record to database.");

        btnDeleteM.setText("DELETE");
        btnDeleteM.setToolTipText("Remove Item from Database");

        btnViewM.setText("VIEW");
        btnViewM.setToolTipText("Refresh table to see changes");

        btnUpdateM.setText("UPDATE");
        btnUpdateM.setToolTipText("Change Records in the Table");

        btnNewSaleM.setText("NEW SALE");
        btnNewSaleM.setToolTipText("Enter Buyer's Information");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddM, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteM, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNewSaleM, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddM)
                            .addComponent(btnDeleteM)
                            .addComponent(btnUpdateM)
                            .addComponent(btnViewM)
                            .addComponent(btnNewSaleM))
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        MoviePane.addTab("Movies", jPanel1);

        tblRecordsGameDisc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Manufacturer", "Genre", "Serial #", "Multi/Single Player", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblRecordsGameDisc);

        btnAddGD.setText("ADD");
        btnAddGD.setToolTipText("Enter a new record to database.");

        btnDeleteGD.setText("DELETE");
        btnDeleteGD.setToolTipText("Remove Item from Database");

        btnViewGD.setText("VIEW");
        btnViewGD.setToolTipText("Refresh table to see changes");

        btnUpdateGD.setText("UPDATE");
        btnUpdateGD.setToolTipText("Change Records in the Table");

        btnNewSaleGD.setText("NEW SALE");
        btnNewSaleGD.setToolTipText("Enter Buyer's Information");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddGD, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteGD, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateGD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewGD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNewSaleGD, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddGD)
                        .addComponent(btnDeleteGD)
                        .addComponent(btnUpdateGD)
                        .addComponent(btnViewGD)
                        .addComponent(btnNewSaleGD))
                    .addComponent(lblIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        MoviePane.addTab("Game Discs", jPanel4);

        tblRecordsGameConsoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Console Name", "Manufacturer", "Color", "Serial #", "# of Controllers", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRecordsGameConsoles);

        btnAddGC.setText("ADD");
        btnAddGC.setToolTipText("Enter a new record to database.");

        btnDeleteGC.setText("DELETE");
        btnDeleteGC.setToolTipText("Remove Item from Database");

        btnViewGC.setText("VIEW");
        btnViewGC.setToolTipText("Refresh table to see changes");

        btnUpdateGC.setText("UPDATE");
        btnUpdateGC.setToolTipText("Change Records in the Table");

        btnNewSaleGC.setText("NEW SALE");
        btnNewSaleGC.setToolTipText("Enter Buyer's Information");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddGC, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteGC, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateGC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewGC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNewSaleGC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddGC)
                        .addComponent(btnDeleteGC)
                        .addComponent(btnUpdateGC)
                        .addComponent(btnViewGC)
                        .addComponent(btnNewSaleGC))
                    .addComponent(lblIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        MoviePane.addTab("Game Consoles", jPanel5);

        lblErrorMessages.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblErrorMessages.setForeground(new java.awt.Color(255, 51, 51));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("System Status:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("CONNECTED");

        jMenu1.setText("File");

        menuItemLogOut.setText("Log Out");
        jMenu1.add(menuItemLogOut);
        jMenu1.add(jSeparator1);

        menuItemExit.setText("Exit");
        jMenu1.add(menuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoviePane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblErrorMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(MoviePane, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblErrorMessages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staffLawn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staffLawn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staffLawn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staffLawn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Test Database */
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new staffLawn().setVisible(true);
            }
        });
    }

    //Check if Database Directory is Empty
    public void DirectoryTest() {
        File dir  = new File ("./DB/");
            if (dir.isDirectory()) {
                if (dir.list().length == 0) {                    
                    btnUpdateM.setEnabled(false);
                    btnDeleteM.setEnabled(false);
                    btnNewSaleM.setEnabled(false);
                    btnUpdateGC.setEnabled(false);
                    btnDeleteGC.setEnabled(false);
                    btnNewSaleGC.setEnabled(false);
                    btnUpdateGD.setEnabled(false);
                    btnDeleteGD.setEnabled(false);
                    btnNewSaleGD.setEnabled(false);
                    tblRecordsMovies.setEnabled(false);
                    tblRecordsGameConsoles.setEnabled(false);
                    tblRecordsGameDisc.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "OOOPS!!! Datababse is Empty!", "", JOptionPane.WARNING_MESSAGE);
                    lblErrorMessages.setText("Buttons disabled for safety.");
                }
            }
    }    
    //Detailed Directory Check
    public void DirectoryDetailedTest() {
        File mr  = new File ("./DB/MovieRecords.txt");
            if (!mr.exists()) {                               
                    btnUpdateM.setEnabled(false);
                    btnDeleteM.setEnabled(false);
                    btnNewSaleM.setEnabled(false);
                    tblRecordsMovies.setEnabled(false);
                    lblErrorMessages.setText("Some buttons are disabled for safety.");                
            } else {
                btnUpdateM.setEnabled(true);
                btnDeleteM.setEnabled(true);
                btnNewSaleM.setEnabled(true);
                tblRecordsMovies.setEnabled(true);
                
            }
            File dr  = new File ("./DB/GameDiscRecords.txt"); 
            if (!dr.exists()) {                   
                    btnUpdateGD.setEnabled(false);
                    btnDeleteGD.setEnabled(false);
                    btnNewSaleGD.setEnabled(false);
                    tblRecordsGameDisc.setEnabled(false);
                    lblErrorMessages.setText("Some buttons are disabled for safety.");                
            } else {
                    btnUpdateGD.setEnabled(true);
                    btnDeleteGD.setEnabled(true);
                    btnNewSaleGD.setEnabled(true);
                    tblRecordsGameDisc.setEnabled(true);
            }
            File cr  = new File ("./DB/GameConsoleRecords.txt");
            if (!cr.exists()) {             
                    btnUpdateGC.setEnabled(false);
                    btnDeleteGC.setEnabled(false);
                    btnNewSaleGC.setEnabled(false);
                    tblRecordsGameConsoles.setEnabled(false);
                    lblErrorMessages.setText("Some buttons are disabled for safety.");                
            } else {
                    btnUpdateGC.setEnabled(true);
                    btnDeleteGC.setEnabled(true);
                    btnNewSaleGC.setEnabled(true);
                    tblRecordsGameConsoles.setEnabled(true);
            }
             
    }
    
    private void setWindowProperties() {
        this.setSize(1000, 550);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.setResizable(false);
    }

    private void registerListeners() {
        btnAddGC.addActionListener(this);
        btnAddGD.addActionListener(this);
        btnAddM.addActionListener(this);
        btnDeleteGD.addActionListener(this);
        btnDeleteGC.addActionListener(this);
        btnDeleteM.addActionListener(this);
        btnUpdateGD.addActionListener(this);
        btnUpdateGC.addActionListener(this);
        btnUpdateM.addActionListener(this);
        btnViewGD.addActionListener(this);
        btnViewGC.addActionListener(this);
        btnViewM.addActionListener(this);
        btnNewSaleGD.addActionListener(this);
        btnNewSaleGC.addActionListener(this);
        btnNewSaleM.addActionListener(this);
        menuItemLogOut.addActionListener(this);
        menuItemExit.addActionListener(this);
    }

    public void ViewMovies() {
        try {
            Movie mdview = new Movie();
            tmpMovieInfo = mdview.DispMovies(); 
            tmpSaleM = mdview.DispMovies();    
            
            String[] columnNames = {"Title", "Genre", "Date Released", "Rating", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental Cost"};
            DefaultTableModel tableModel = new DefaultTableModel(tmpMovieInfo, columnNames) { };
            DefaultTableModel tableModelMovieSale = new DefaultTableModel(tmpMovieInfo, columnNames) { };
            tblRecordsMovies.setModel(tableModel);
        } catch (FileNotFoundException ex) {

        }
    }

    public void ViewDisc() {
        try {
            GameDisc ddview = new GameDisc();
            tmpDiscInfo = ddview.DispDisc(); 
            tmpSaleGD = ddview.DispDisc();
            
            String[] columnNames = {"Title", "Manufacturer", "Genre", "Serial #", "Multi/Single Player", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental Cost"};
            DefaultTableModel tableModel = new DefaultTableModel(tmpDiscInfo, columnNames) { };
            DefaultTableModel tableModelDiscSale = new DefaultTableModel(tmpDiscInfo, columnNames) { };
            tblRecordsGameDisc.setModel(tableModel);
        } catch (FileNotFoundException ex) {

        }
    }

    public void ViewConsole() {
        try {
            GameConsole cdview = new GameConsole();
            tmpConsoleInfo = cdview.DispConsole(); 
            tmpSaleGC = cdview.DispConsole();

            String[] columnNames = {"Console Name", "Manufacturer", "Color", "Serial #", "# of Controllers", "Date Acquired", "Rental ID", "# of Copies", "Daily Rental"};
            DefaultTableModel tableModel = new DefaultTableModel(tmpConsoleInfo, columnNames) { };
            DefaultTableModel tableModelSale = new DefaultTableModel(tmpSaleGC, columnNames) { };
            tblRecordsGameConsoles.setModel(tableModel);
            tblRecordsGameConsoles.setModel(tableModelSale);
        } catch (FileNotFoundException ex) { }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MoviePane;
    private javax.swing.JButton btnAddGC;
    private javax.swing.JButton btnAddGD;
    private javax.swing.JButton btnAddM;
    private javax.swing.JButton btnDeleteGC;
    private javax.swing.JButton btnDeleteGD;
    private javax.swing.JButton btnDeleteM;
    private javax.swing.JButton btnNewSaleGC;
    private javax.swing.JButton btnNewSaleGD;
    private javax.swing.JButton btnNewSaleM;
    private javax.swing.JButton btnUpdateGC;
    private javax.swing.JButton btnUpdateGD;
    private javax.swing.JButton btnUpdateM;
    private javax.swing.JButton btnViewGC;
    private javax.swing.JButton btnViewGD;
    private javax.swing.JButton btnViewM;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblErrorMessages;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblIcon1;
    private javax.swing.JLabel lblIcon2;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemLogOut;
    private javax.swing.JTable tblRecordsGameConsoles;
    private javax.swing.JTable tblRecordsGameDisc;
    private javax.swing.JTable tblRecordsMovies;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {

        //MENU ITEM BUTTUNS
        if (e.getSource().equals(menuItemLogOut)) { 
            JOptionPane.showMessageDialog (null, "System Log Out", "GoodBye", JOptionPane.WARNING_MESSAGE);
            this.dispose();            
            ModeSelect ml = new ModeSelect();
            ml.setVisible(true);
        }
        if (e.getSource().equals(menuItemExit)) {
            System.exit(0);
        }

        //ADDING RECORDS
        if (e.getSource().equals(btnAddM)) {
            addMovie am = new addMovie(this);
            this.setEnabled(false);
            am.show();
        }        
        if (e.getSource().equals(btnAddGD)) {
            addGameDisc adg = new addGameDisc();
            adg.show();
        }
        if (e.getSource().equals(btnAddGC)) {
            addGameConsole adc = new addGameConsole();
            adc.show();
        }
        
        //REFRESH RECORD VIEWS
        if(e.getSource().equals(btnViewM)) {
            ViewMovies();
            DirectoryDetailedTest();
        }
        if(e.getSource().equals(btnViewGD)) {
            ViewDisc();
            DirectoryDetailedTest();
        }
        if(e.getSource().equals(btnViewGC)) {
            ViewConsole();
            DirectoryDetailedTest();
        }

        //DELETING RECORDS
            //START DELETE MOVIES
        if (e.getSource().equals(btnDeleteM)) {
            if (tblRecordsMovies.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {
                int resp = JOptionPane.showConfirmDialog(this, "Do you want to delete this record?", "Please Confirm", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.NO_OPTION) {
                    System.out.println("Option Cancelled");
                }
                if (resp == JOptionPane.YES_OPTION) {
                    Object[][] movieTemp = new Object[15][8];
                    int count, count2 = 0;
                    for (count = 0; count < tmpMovieInfo.length; count++) {
                        if (count == tblRecordsMovies.getSelectedRow()) {
                            count++;
                        }
                        movieTemp[count2][0] = tmpMovieInfo[count][0];
                        movieTemp[count2][1] = tmpMovieInfo[count][1];
                        movieTemp[count2][2] = tmpMovieInfo[count][2];
                        movieTemp[count2][3] = tmpMovieInfo[count][3];
                        movieTemp[count2][4] = tmpMovieInfo[count][4];
                        movieTemp[count2][5] = tmpMovieInfo[count][5];
                        movieTemp[count2][6] = tmpMovieInfo[count][6];
                        movieTemp[count2][7] = tmpMovieInfo[count][7];
                        count2++;
                    }
                    try {
                        FileWriter fp = new FileWriter("./DB/MovieRecords.txt");
                        for (int cnt = 0; cnt < movieTemp.length; cnt++) {
                            if (movieTemp[cnt][0] == null) {
                                break;
                            }
                            fp.write((String) movieTemp[cnt][0] + " ");
                            fp.write((String) movieTemp[cnt][1] + " ");
                            fp.write((String) movieTemp[cnt][2] + " ");
                            fp.write((String) movieTemp[cnt][3] + " ");
                            fp.write((String) movieTemp[cnt][4] + " ");
                            fp.write((String) movieTemp[cnt][5] + " ");
                            fp.write((String) movieTemp[cnt][6] + " ");
                            fp.write((String) movieTemp[cnt][7] + " \n");
                        }
                        fp.close();
                    } catch (Exception oe) { }
                }
                JOptionPane.showMessageDialog(rootPane, "Press VIEW to refresh changes.");
            }
        }//END DELETE FOR MOVIES
            
            //START DELETE GAME DISC
        if (e.getSource().equals(btnDeleteGD)) {
            if (tblRecordsGameDisc.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {
                int resp = JOptionPane.showConfirmDialog(this, "Do you want to delete this record?", "Please Confirm", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.NO_OPTION) {
                    System.out.println("Option Cancelled");
                }
                if (resp == JOptionPane.YES_OPTION) {
                    Object[][] discTemp = new Object[15][9];
                    int count, count2 = 0;
                    for (count = 0; count < tmpDiscInfo.length; count++) {
                        if (count == tblRecordsGameDisc.getSelectedRow()) {
                            count++;
                        }
                        discTemp[count2][0] = tmpDiscInfo[count][0];
                        discTemp[count2][1] = tmpDiscInfo[count][1];
                        discTemp[count2][2] = tmpDiscInfo[count][2];
                        discTemp[count2][3] = tmpDiscInfo[count][3];
                        discTemp[count2][4] = tmpDiscInfo[count][4];
                        discTemp[count2][5] = tmpDiscInfo[count][5];
                        discTemp[count2][6] = tmpDiscInfo[count][6];
                        discTemp[count2][7] = tmpDiscInfo[count][7];
                        discTemp[count2][8] = tmpDiscInfo[count][8];
                        count2++;
                    }
                    try {
                        FileWriter fp = new FileWriter("./DB/GameDiscRecords.txt");
                        for (int cnt = 0; cnt < discTemp.length; cnt++) {
                            if (discTemp[cnt][0] == null) {
                                break;
                            }
                            fp.write((String) discTemp[cnt][0] + " ");
                            fp.write((String) discTemp[cnt][1] + " ");
                            fp.write((String) discTemp[cnt][2] + " ");
                            fp.write((String) discTemp[cnt][3] + " ");
                            fp.write((String) discTemp[cnt][4] + " ");
                            fp.write((String) discTemp[cnt][5] + " ");
                            fp.write((String) discTemp[cnt][6] + " ");
                            fp.write((String) discTemp[cnt][7] + " ");
                            fp.write((String) discTemp[cnt][8] + " \n");
                        }
                        fp.close();
                    } catch (Exception oe) { }
                }
                JOptionPane.showMessageDialog(rootPane, "Press VIEW to refresh changes.");
            }
        }//END DELETE FOR GAME DISC
        
                    //START DELETE GAME CONSOLE
        if (e.getSource().equals(btnDeleteGC)) {
            if (tblRecordsGameConsoles.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {
                int resp = JOptionPane.showConfirmDialog(this, "Do you want to delete this record?", "Please Confirm", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.NO_OPTION) {
                    System.out.println("Option Cancelled");
                }
                if (resp == JOptionPane.YES_OPTION) {
                    Object[][] consoleTemp = new Object[15][9];
                    int count, count2 = 0;
                    for (count = 0; count < tmpConsoleInfo.length; count++) {
                        if (count == tblRecordsGameConsoles.getSelectedRow()) {
                            count++;
                        }
                            consoleTemp[count2][0] = tmpConsoleInfo[count][0];
                            consoleTemp[count2][1] = tmpConsoleInfo[count][1];
                            consoleTemp[count2][2] = tmpConsoleInfo[count][2];
                            consoleTemp[count2][3] = tmpConsoleInfo[count][3];
                            consoleTemp[count2][4] = tmpConsoleInfo[count][4];
                            consoleTemp[count2][5] = tmpConsoleInfo[count][5];
                            consoleTemp[count2][6] = tmpConsoleInfo[count][6];
                            consoleTemp[count2][7] = tmpConsoleInfo[count][7];
                            consoleTemp[count2][8] = tmpConsoleInfo[count][8];
                            count2++;
                    }
                    try {
                        FileWriter fp = new FileWriter("./DB/GameConsoleRecords.txt");
                        for (int cnt = 0; cnt < consoleTemp.length; cnt++) {
                            if (consoleTemp[cnt][0] == null) {
                                break;
                            }
                            fp.write((String) consoleTemp[cnt][0] + " ");
                            fp.write((String) consoleTemp[cnt][1] + " ");
                            fp.write((String) consoleTemp[cnt][2] + " ");
                            fp.write((String) consoleTemp[cnt][3] + " ");
                            fp.write((String) consoleTemp[cnt][4] + " ");
                            fp.write((String) consoleTemp[cnt][5] + " ");
                            fp.write((String) consoleTemp[cnt][6] + " ");
                            fp.write((String) consoleTemp[cnt][7] + " ");
                            fp.write((String) consoleTemp[cnt][8] + " \n");
                        }
                        fp.close();
                    } catch (Exception oe) { System.out.println(oe); }
                }
                JOptionPane.showMessageDialog(rootPane, "Press VIEW to refresh changes.");
            }
        }//END DELETE FOR GAME DISC
        
        //Update Users
            //UPDATE MOVIE
        if (e.getSource().equals(btnUpdateM)) {            
            if (tblRecordsMovies.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {        
                movieUpdate mu = new movieUpdate(tmpMovieInfo,tblRecordsMovies.getSelectedRow());            
                mu.showRec(); 
            }
        }
        //UPDATE GAME DISC
        if (e.getSource().equals(btnUpdateGD)) {            
            if (tblRecordsGameDisc.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {        
            discUpdate du = new discUpdate(tmpDiscInfo,tblRecordsGameDisc.getSelectedRow());
            du.showRec();            
            }
        }
        //UPDATE GAME CONSOLE
        if (e.getSource().equals(btnUpdateGC)) {            
            if (tblRecordsGameConsoles.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {         
                consoleUpdate cu = new consoleUpdate(tmpConsoleInfo,tblRecordsGameConsoles.getSelectedRow());
                cu.showRec();            
            }
        }
        //NEW SALE
            //GAMECONSOLE SALE
        if (e.getSource().equals(btnNewSaleGC)) {            
            if (tblRecordsGameConsoles.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {         
                clientSale cs = new clientSale(tmpSaleGC,tblRecordsGameConsoles.getSelectedRow());
                cs.saleConsoles();            
            }
        }
            //GAME DISC SALES
        if (e.getSource().equals(btnNewSaleGD)) {            
            if (tblRecordsGameDisc.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {             
            clientSale cs = new clientSale(tmpSaleGD,tblRecordsGameDisc.getSelectedRow());
            cs.saleDisc();            
            }
        }
        
            //MOVIE SALES
        if (e.getSource().equals(btnNewSaleM)) {            
            if (tblRecordsMovies.getSelectedRow() == -1) {
                lblErrorMessages.setText("Please select a row to edit");
            } else {        
            clientSale cs = new clientSale(tmpSaleM,tblRecordsMovies.getSelectedRow());            
            cs.saleMovies();            
            }
        }
    }
}
